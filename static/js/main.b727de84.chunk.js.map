{"version":3,"sources":["component/Calculator/Calculator.js","App.js","serviceWorker.js","index.js","component/Calculator/logo.png"],"names":["Calculator","state","input","operationPerformed","oldValue","operator","isCalculateInit","isOperatorClicked","isErrorOccured","handleButtonClick","value","i","document","getElementsByClassName","disabled","handleClearScreen","setState","handleOperatorClick","operatorClicked","handleOperation","substring","length","firstValue","secondValue","result","parseFloat","Error","err","handleTrignometry","Math","sin","PI","cos","tan","handleDelete","handleDotClick","Number","isInteger","handePlusOrMinus","handleRoot","sqrt","this","className","src","logo","alt","type","readOnly","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.b727de84.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Calculator.css\";\nimport logo from \"./logo.png\";\n\nexport class Calculator extends Component {\n  state = {\n    input: \"0\",\n    operationPerformed: \"\",\n    oldValue: \"0\",\n    operator: \"\",\n    isCalculateInit: false,\n    isOperatorClicked: false,\n    isErrorOccured: false,\n  };\n\n  handleButtonClick = (value) => {\n    const { input, isOperatorClicked, isErrorOccured } = this.state;\n\n    if (input === \"0\" || isOperatorClicked || isErrorOccured) {\n      if (isErrorOccured) {\n        for (let i = 0; i < 7; i++) {\n          document.getElementsByClassName(\"operatorButton\")[i].disabled = false;\n        }\n        this.handleClearScreen();\n      }\n      this.setState({\n        input: value,\n        isOperatorClicked: false,\n      });\n    } else {\n      this.setState({\n        input: `${input}${value}`,\n      });\n    }\n  };\n\n  handleOperatorClick = (operatorClicked) => {\n    const {\n      input,\n      isCalculateInit,\n      oldValue,\n      operator,\n      operationPerformed,\n      isOperatorClicked,\n      isErrorOccured,\n    } = this.state;\n\n    if (operatorClicked === \"=\") {\n      if (isErrorOccured) {\n        for (let i = 0; i < 7; i++) {\n          document.getElementsByClassName(\"operatorButton\")[i].disabled = false;\n        }\n        this.handleClearScreen();\n      } else {\n        this.setState({\n          operationPerformed: `${operationPerformed}${input}=`,\n          isCalculateInit: false,\n        });\n        this.handleOperation(oldValue, input, operator);\n      }\n    } else {\n      if (isOperatorClicked) {\n        this.setState({\n          operator: operatorClicked,\n          operationPerformed: `${operationPerformed.substring(\n            0,\n            operationPerformed.length - 1\n          )}${operatorClicked}`,\n        });\n      } else if (isCalculateInit) {\n        this.handleOperation(oldValue, input, operator);\n        this.setState({\n          operator: operatorClicked,\n          operationPerformed: `${operationPerformed}${input}${operatorClicked}`,\n          isOperatorClicked: true,\n        });\n      } else {\n        this.setState({\n          operator: operatorClicked,\n          operationPerformed: `${operationPerformed}${input}${operatorClicked}`,\n          oldValue: input,\n          isOperatorClicked: true,\n          isCalculateInit: true,\n        });\n      }\n    }\n  };\n\n  handleOperation = (firstValue, secondValue, operator) => {\n    let result = 0;\n    firstValue = parseFloat(firstValue);\n    secondValue = parseFloat(secondValue);\n\n    if (operator === \"+\") {\n      result = `${firstValue + secondValue}`;\n    } else if (operator === \"-\") {\n      result = `${firstValue - secondValue}`;\n    } else if (operator === \"x\") {\n      result = `${firstValue * secondValue}`;\n    } else if (operator === \"/\") {\n      try {\n        if (secondValue === 0) {\n          throw new Error(\"Can't divide by zero.\");\n        } else {\n          result = `${firstValue / secondValue}`;\n        }\n      } catch (err) {\n        result = `${err}`;\n        for (let i = 0; i < 7; i++) {\n          document.getElementsByClassName(\"operatorButton\")[i].disabled = true;\n        }\n        this.setState({\n          isErrorOccured: true,\n        });\n      }\n    }\n\n    this.setState({\n      input: result,\n      oldValue: result,\n    });\n  };\n\n  handleTrignometry = (operatorClicked) => {\n    const { input } = this.state;\n    let result = 0;\n    let value = parseFloat(input);\n    if (operatorClicked === \"sin\") {\n      result = Math.sin((value * Math.PI) / 180);\n    } else if (operatorClicked === \"cos\") {\n      result = Math.cos((value * Math.PI) / 180);\n    } else if (operatorClicked === \"tan\") {\n      result = Math.tan((value * Math.PI) / 180);\n    } else if (operatorClicked === \"sec\") {\n      result = 1 / Math.sin((value * Math.PI) / 180);\n    } else if (operatorClicked === \"csc\") {\n      result = 1 / Math.cos((value * Math.PI) / 180);\n    } else if (operatorClicked === \"cot\") {\n      result = 1 / Math.tan((value * Math.PI) / 180);\n    }\n\n    this.setState({\n      input: `${result}`,\n      oldValue: `${result}`,\n      isOperatorClicked: true,\n      operationPerformed: `${operatorClicked}(${value})`,\n    });\n  };\n\n  handleClearScreen = () => {\n    this.setState({\n      input: \"0\",\n      operationPerformed: \"\",\n      isOperatorClicked: false,\n      isCalculateInit: false,\n      isErrorOccured: false,\n      oldValue: \"0\",\n      operator: \"\",\n    });\n  };\n\n  handleDelete = () => {\n    const { input } = this.state;\n    this.setState({\n      input: input.substring(0, input.length - 1),\n    });\n  };\n\n  handleDotClick = () => {\n    const { input, isOperatorClicked } = this.state;\n    if (isOperatorClicked) {\n      this.setState({\n        input: \"0.\",\n        isOperatorClicked: false,\n      });\n    } else if (Number.isInteger(parseFloat(input))) {\n      this.setState({\n        input: `${input}.`,\n      });\n    }\n  };\n\n  handePlusOrMinus = () => {\n    const { input } = this.state;\n    this.setState({\n      input: parseFloat(input) * -1,\n    });\n  };\n\n  handleRoot = () => {\n    const { input, operationPerformed } = this.state;\n    this.setState({\n      input: Math.sqrt(input),\n      operationPerformed: `${operationPerformed}√${input}`,\n    });\n  };\n\n  render() {\n    const { input, operationPerformed } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"calculator\">\n          <div className=\"title\">\n            <div className=\"logo\">\n              <img src={logo} alt=\"\" />\n            </div>\n            <div className=\"label\">\n              <h1>Calculator</h1>\n            </div>\n          </div>\n          <div className=\"screen text-center\">\n            <input type=\"text\" value={operationPerformed + \" \"} readOnly />\n            <input type=\"text\" value={input + \" \"} readOnly />\n          </div>\n          <div className=\"buttons\">\n            <div className=\"mainButtons\">\n              <div className=\"firstRow\">\n                <input\n                  className=\"numericButton\"\n                  type=\"button\"\n                  onClick={() => this.handleButtonClick(\"7\")}\n                  value=\"7\"\n                />\n                <input\n                  className=\"numericButton\"\n                  type=\"button\"\n                  onClick={() => this.handleButtonClick(\"8\")}\n                  value=\"8\"\n                />\n                <input\n                  className=\"numericButton\"\n                  type=\"button\"\n                  onClick={() => this.handleButtonClick(\"9\")}\n                  value=\"9\"\n                />\n                <input\n                  className=\"additionalButton\"\n                  type=\"button\"\n                  onClick={this.handleClearScreen}\n                  value=\"C\"\n                />\n                <input\n                  className=\"additionalButton\"\n                  type=\"button\"\n                  onClick={this.handleDelete}\n                  value=\"DEL\"\n                />\n              </div>\n              <div className=\"secondRow\">\n                <input\n                  className=\"numericButton\"\n                  type=\"button\"\n                  onClick={() => this.handleButtonClick(\"4\")}\n                  value=\"4\"\n                />\n                <input\n                  className=\"numericButton\"\n                  type=\"button\"\n                  onClick={() => this.handleButtonClick(\"5\")}\n                  value=\"5\"\n                />\n                <input\n                  className=\"numericButton\"\n                  type=\"button\"\n                  onClick={() => this.handleButtonClick(\"6\")}\n                  value=\"6\"\n                />\n                <input\n                  className=\"operatorButton\"\n                  type=\"button\"\n                  onClick={this.handePlusOrMinus}\n                  value=\"+/-\"\n                />\n                <input\n                  className=\"operatorButton\"\n                  type=\"button\"\n                  onClick={this.handleRoot}\n                  value=\"√\"\n                />\n              </div>\n              <div className=\"thirdRow\">\n                <input\n                  className=\"numericButton\"\n                  type=\"button\"\n                  onClick={() => this.handleButtonClick(\"1\")}\n                  value=\"1\"\n                />\n                <input\n                  className=\"numericButton\"\n                  type=\"button\"\n                  onClick={() => this.handleButtonClick(\"2\")}\n                  value=\"2\"\n                />\n                <input\n                  className=\"numericButton\"\n                  type=\"button\"\n                  onClick={() => this.handleButtonClick(\"3\")}\n                  value=\"3\"\n                />\n                <input\n                  className=\"operatorButton\"\n                  type=\"button\"\n                  onClick={() => this.handleOperatorClick(\"x\")}\n                  value=\"x\"\n                />\n                <input\n                  className=\"operatorButton\"\n                  type=\"button\"\n                  onClick={() => this.handleOperatorClick(\"/\")}\n                  value=\"/\"\n                />\n              </div>\n              <div className=\"fourthRow\">\n                <input\n                  className=\"operatorButton additionalButton\"\n                  onClick={this.handleDotClick}\n                  type=\"button\"\n                  value=\".\"\n                />\n                <input\n                  className=\"numericButton\"\n                  type=\"button\"\n                  onClick={() => this.handleButtonClick(\"0\")}\n                  value=\"0\"\n                />\n                <input\n                  className=\"additionalButton\"\n                  type=\"button\"\n                  onClick={() => this.handleOperatorClick(\"=\")}\n                  value=\"=\"\n                />\n                <input\n                  className=\"operatorButton\"\n                  type=\"button\"\n                  onClick={() => this.handleOperatorClick(\"+\")}\n                  value=\"+\"\n                />\n                <input\n                  className=\"operatorButton\"\n                  type=\"button\"\n                  onClick={() => this.handleOperatorClick(\"-\")}\n                  value=\"-\"\n                />\n              </div>\n            </div>\n            <div className=\"advancedButtons\">\n              <div className=\"firstRow\">\n                <input\n                  className=\"memoryButton\"\n                  type=\"button\"\n                  onClick={() => this.handleTrignometry(\"hyp\")}\n                  value=\"MC\"\n                />\n                <input\n                  className=\"memoryButton\"\n                  onClick={() => this.handleTrignometry(\"rad\")}\n                  type=\"button\"\n                  value=\"MR\"\n                />\n                <input\n                  className=\"memoryButton\"\n                  type=\"button\"\n                  onClick={() => this.handleTrignometry(\"hyp\")}\n                  value=\"M+\"\n                />\n                <input\n                  className=\"memoryButton\"\n                  onClick={() => this.handleTrignometry(\"rad\")}\n                  type=\"button\"\n                  value=\"M-\"\n                />\n              </div>\n              <div className=\"secondRow\">\n                <input\n                  className=\"scientificButton\"\n                  onClick={() => this.handleTrignometry(\"sin\")}\n                  type=\"button\"\n                  value=\"sin\"\n                />\n                <input\n                  className=\"scientificButton\"\n                  onClick={() => this.handleTrignometry(\"sec\")}\n                  type=\"button\"\n                  value=\"sec\"\n                />\n              </div>\n              <div className=\"thirdRow\">\n                <input\n                  className=\"scientificButton\"\n                  onClick={() => this.handleTrignometry(\"cos\")}\n                  type=\"button\"\n                  value=\"cos\"\n                />\n                <input\n                  className=\"scientificButton\"\n                  onClick={() => this.handleTrignometry(\"csc\")}\n                  type=\"button\"\n                  value=\"csc\"\n                />\n              </div>\n              <div className=\"fourthRow\">\n                <input\n                  className=\"scientificButton\"\n                  onClick={() => this.handleTrignometry(\"tan\")}\n                  type=\"button\"\n                  value=\"tan\"\n                />\n                <input\n                  className=\"scientificButton\"\n                  onClick={() => this.handleTrignometry(\"cot\")}\n                  type=\"button\"\n                  value=\"cot\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React, { Component } from \"react\";\nimport Calculator from \"./component/Calculator/Calculator\";\n\nexport class App extends Component {\n  render() {\n    return (\n      <div>\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.a0e30e03.png\";"],"sourceRoot":""}