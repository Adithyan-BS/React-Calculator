{"version":3,"sources":["component/Calculator/Calculator.js","App.js","serviceWorker.js","index.js","component/Calculator/logo.png"],"names":["Calculator","state","input","operationPerformed","oldValue","operator","isCalculateInit","isOperatorClicked","isErrorOccured","handleButtonClick","value","i","document","getElementsByClassName","disabled","handleClearScreen","setState","handleOperatorClick","operatorClicked","handleOperation","substring","length","firstValue","secondValue","result","parseFloat","Error","err","handleDelete","handleDotClick","Number","isInteger","handePlusOrMinus","handleRoot","Math","sqrt","this","className","src","logo","alt","type","readOnly","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.2cb251dc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Calculator.css\";\r\nimport logo from \"./logo.png\";\r\n\r\nexport class Calculator extends Component {\r\n  state = {\r\n    input: \"0\",\r\n    operationPerformed: \"\",\r\n    oldValue: \"0\",\r\n    operator: \"\",\r\n    isCalculateInit: false,\r\n    isOperatorClicked: false,\r\n    isErrorOccured: false,\r\n  };\r\n\r\n  handleButtonClick = (value) => {\r\n    const { input, isOperatorClicked, isErrorOccured } = this.state;\r\n\r\n    if (input === \"0\" || isOperatorClicked || isErrorOccured) {\r\n      if (isErrorOccured) {\r\n        for (let i = 0; i < 7; i++) {\r\n          document.getElementsByClassName(\"operatorButton\")[i].disabled = false;\r\n        }\r\n        this.handleClearScreen();\r\n      }\r\n      this.setState({\r\n        input: value,\r\n        isOperatorClicked: false,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        input: `${input}${value}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleOperatorClick = (operatorClicked) => {\r\n    const {\r\n      input,\r\n      isCalculateInit,\r\n      oldValue,\r\n      operator,\r\n      operationPerformed,\r\n      isOperatorClicked,\r\n      isErrorOccured,\r\n    } = this.state;\r\n\r\n    if (operatorClicked === \"=\") {\r\n      if (isErrorOccured) {\r\n        for (let i = 0; i < 7; i++) {\r\n          document.getElementsByClassName(\"operatorButton\")[i].disabled = false;\r\n        }\r\n        this.handleClearScreen();\r\n      } else {\r\n        this.setState({\r\n          operationPerformed: `${operationPerformed}${input}=`,\r\n          isCalculateInit: false,\r\n        });\r\n        this.handleOperation(oldValue, input, operator);\r\n      }\r\n    } else {\r\n      if (isOperatorClicked) {\r\n        this.setState({\r\n          operator: operatorClicked,\r\n          operationPerformed: `${operationPerformed.substring(\r\n            0,\r\n            operationPerformed.length - 1\r\n          )}${operatorClicked}`,\r\n        });\r\n      } else if (isCalculateInit) {\r\n        this.handleOperation(oldValue, input, operator);\r\n        this.setState({\r\n          operator: operatorClicked,\r\n          operationPerformed: `${operationPerformed}${input}${operatorClicked}`,\r\n          isOperatorClicked: true,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          operator: operatorClicked,\r\n          operationPerformed: `${operationPerformed}${input}${operatorClicked}`,\r\n          oldValue: input,\r\n          isOperatorClicked: true,\r\n          isCalculateInit: true,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleOperation = (firstValue, secondValue, operator) => {\r\n    let result = 0;\r\n    firstValue = parseFloat(firstValue);\r\n    secondValue = parseFloat(secondValue);\r\n\r\n    if (operator === \"+\") {\r\n      result = `${firstValue + secondValue}`;\r\n    } else if (operator === \"-\") {\r\n      result = `${firstValue - secondValue}`;\r\n    } else if (operator === \"x\") {\r\n      result = `${firstValue * secondValue}`;\r\n    } else if (operator === \"/\") {\r\n      try {\r\n        if (secondValue === 0) {\r\n          throw new Error(\"Can't divide by zero.\");\r\n        } else {\r\n          result = `${firstValue / secondValue}`;\r\n        }\r\n      } catch (err) {\r\n        result = `${err}`;\r\n        for (let i = 0; i < 7; i++) {\r\n          document.getElementsByClassName(\"operatorButton\")[i].disabled = true;\r\n        }\r\n        this.setState({\r\n          isErrorOccured: true,\r\n        });\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      input: result,\r\n      oldValue: result,\r\n    });\r\n  };\r\n\r\n  handleClearScreen = () => {\r\n    this.setState({\r\n      input: \"0\",\r\n      operationPerformed: \"\",\r\n      isOperatorClicked: false,\r\n      isCalculateInit: false,\r\n      isErrorOccured: false,\r\n      oldValue: \"0\",\r\n      operator: \"\",\r\n    });\r\n  };\r\n\r\n  handleDelete = () => {\r\n    const { input } = this.state;\r\n    this.setState({\r\n      input: input.substring(0, input.length - 1),\r\n    });\r\n  };\r\n\r\n  handleDotClick = () => {\r\n    const { input, isOperatorClicked } = this.state;\r\n    if (isOperatorClicked) {\r\n      this.setState({\r\n        input: \"0.\",\r\n        isOperatorClicked: false,\r\n      });\r\n    } else if (Number.isInteger(parseFloat(input))) {\r\n      this.setState({\r\n        input: `${input}.`,\r\n      });\r\n    }\r\n  };\r\n\r\n  handePlusOrMinus = () => {\r\n    const { input } = this.state;\r\n    this.setState({\r\n      input: parseFloat(input) * -1,\r\n    });\r\n  };\r\n\r\n  handleRoot = () => {\r\n    const { input, operationPerformed } = this.state;\r\n    this.setState({\r\n      input: Math.sqrt(input),\r\n      operationPerformed: `${operationPerformed}√${input}`,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { input, operationPerformed } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"calculator\">\r\n          <div className=\"title\">\r\n            <div className=\"logo\">\r\n              <img src={logo} alt=\"\" />\r\n            </div>\r\n            <div className=\"label\">\r\n              <h1>Calculator</h1>\r\n            </div>\r\n          </div>\r\n          <div className=\"screen text-center\">\r\n            <input type=\"text\" value={operationPerformed + \" \"} readOnly />\r\n            <input type=\"text\" value={input + \" \"} readOnly />\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <div className=\"mainButtons\">\r\n              <div className=\"firstRow\">\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"7\")}\r\n                  value=\"7\"\r\n                />\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"8\")}\r\n                  value=\"8\"\r\n                />\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"9\")}\r\n                  value=\"9\"\r\n                />\r\n                <input\r\n                  className=\"additionalButton\"\r\n                  type=\"button\"\r\n                  onClick={this.handleClearScreen}\r\n                  value=\"C\"\r\n                />\r\n                <input\r\n                  className=\"additionalButton\"\r\n                  type=\"button\"\r\n                  onClick={this.handleDelete}\r\n                  value=\"DEL\"\r\n                />\r\n              </div>\r\n              <div className=\"secondRow\">\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"4\")}\r\n                  value=\"4\"\r\n                />\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"5\")}\r\n                  value=\"5\"\r\n                />\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"6\")}\r\n                  value=\"6\"\r\n                />\r\n                <input\r\n                  className=\"operatorButton\"\r\n                  type=\"button\"\r\n                  onClick={this.handePlusOrMinus}\r\n                  value=\"+/-\"\r\n                />\r\n                <input\r\n                  className=\"operatorButton\"\r\n                  type=\"button\"\r\n                  onClick={this.handleRoot}\r\n                  value=\"√\"\r\n                />\r\n              </div>\r\n              <div className=\"thirdRow\">\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"1\")}\r\n                  value=\"1\"\r\n                />\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"2\")}\r\n                  value=\"2\"\r\n                />\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"3\")}\r\n                  value=\"3\"\r\n                />\r\n                <input\r\n                  className=\"operatorButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleOperatorClick(\"x\")}\r\n                  value=\"x\"\r\n                />\r\n                <input\r\n                  className=\"operatorButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleOperatorClick(\"/\")}\r\n                  value=\"/\"\r\n                />\r\n              </div>\r\n              <div className=\"fourthRow\">\r\n                <input\r\n                  className=\"operatorButton additionalButton\"\r\n                  onClick={this.handleDotClick}\r\n                  type=\"button\"\r\n                  value=\".\"\r\n                />\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"0\")}\r\n                  value=\"0\"\r\n                />\r\n                <input\r\n                  className=\"additionalButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleOperatorClick(\"=\")}\r\n                  value=\"=\"\r\n                />\r\n                <input\r\n                  className=\"operatorButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleOperatorClick(\"+\")}\r\n                  value=\"+\"\r\n                />\r\n                <input\r\n                  className=\"operatorButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleOperatorClick(\"-\")}\r\n                  value=\"-\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"advancedButtons\">\r\n              <div className=\"firstRow\">\r\n                <input className=\"scientificButton\" type=\"button\" value=\"hyp\" />\r\n                <input className=\"scientificButton\" type=\"button\" value=\"rad\" />\r\n              </div>\r\n              <div className=\"secondRow\">\r\n                <input className=\"scientificButton\" type=\"button\" value=\"sin\" />\r\n                <input className=\"scientificButton\" type=\"button\" value=\"sec\" />\r\n              </div>\r\n              <div className=\"thirdRow\">\r\n                <input className=\"scientificButton\" type=\"button\" value=\"cos\" />\r\n                <input className=\"scientificButton\" type=\"button\" value=\"cse\" />\r\n              </div>\r\n              <div className=\"fourthRow\">\r\n                <input className=\"scientificButton\" type=\"button\" value=\"tan\" />\r\n                <input className=\"scientificButton\" type=\"button\" value=\"cot\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React, { Component } from \"react\";\nimport Calculator from \"./component/Calculator/Calculator\";\n\nexport class App extends Component {\n  render() {\n    return (\n      <div>\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.a0e30e03.png\";"],"sourceRoot":""}