{"version":3,"sources":["component/Calculator/Calculator.js","App.js","serviceWorker.js","index.js","component/Calculator/logo.png"],"names":["Calculator","state","input","operationPerformed","oldValue","isDotClicked","operator","handleButtonClick","value","setState","handleOperatorClick","handleOperation","firstValue","secondValue","parseFloat","handleClearScreen","handleDelete","substring","length","handleDotClick","handePlusOrMinus","handleRoot","Math","sqrt","this","className","src","logo","alt","type","readOnly","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"6NAoReA,EAhRf,4MACEC,MAAQ,CACNC,MAAO,IACPC,mBAAoB,GACpBC,SAAU,IACVC,cAAc,EACdC,SAAU,IANd,EASEC,kBAAoB,SAACC,GAAW,IACtBN,EAAU,EAAKD,MAAfC,MAEM,MAAVA,EACF,EAAKO,SAAS,CACZP,MAAOM,IAGT,EAAKC,SAAS,CACZP,MAAOA,EAAQM,KAlBvB,EAuBEE,oBAAsB,SAACJ,GAAc,IAAD,EACI,EAAKL,MAAnCC,EAD0B,EAC1BA,MAAOC,EADmB,EACnBA,mBACf,EAAKM,SAAS,CACZH,SAAUA,EACVH,mBAAoBA,EAAqBD,EAAQI,EACjDF,SAAUF,EACVA,MAAO,OA7Bb,EAiCES,gBAAkB,SAACC,EAAYC,EAAaP,GAAc,IAAD,EACjB,EAAKL,MAAnCC,EAD+C,EAC/CA,MAAOC,EADwC,EACxCA,mBACE,MAAbG,EACF,EAAKG,SAAS,CACZP,MAAOY,WAAWF,GAAcE,WAAWD,KAEvB,MAAbP,EACT,EAAKG,SAAS,CACZP,MAAOY,WAAWF,GAAcE,WAAWD,KAEvB,MAAbP,EACT,EAAKG,SAAS,CACZP,MAAOY,WAAWF,GAAcE,WAAWD,KAEvB,MAAbP,GACT,EAAKG,SAAS,CACZP,MAAOY,WAAWF,GAAcE,WAAWD,KAG/C,EAAKJ,SAAS,CACZN,mBAAoBA,EAAqBD,EAAQ,OArDvD,EAyDEa,kBAAoB,WAClB,EAAKN,SAAS,CACZP,MAAO,IACPC,mBAAoB,GACpBE,cAAc,KA7DpB,EAiEEW,aAAe,WAAO,IACZd,EAAU,EAAKD,MAAfC,MACR,EAAKO,SAAS,CACZP,MAAOA,EAAMe,UAAU,EAAGf,EAAMgB,OAAS,MApE/C,EAwEEC,eAAiB,WAAO,IAAD,EACW,EAAKlB,MAA7BI,EADa,EACbA,aAAcH,EADD,EACCA,MACjBG,GACH,EAAKI,SAAS,CACZP,MAAOA,EAAQ,IACfG,cAAc,KA7EtB,EAkFEe,iBAAmB,WAAO,IAChBlB,EAAU,EAAKD,MAAfC,MACR,EAAKO,SAAS,CACZP,OAA4B,EAArBY,WAAWZ,MArFxB,EAyFEmB,WAAa,WAAO,IACVnB,EAAU,EAAKD,MAAfC,MACR,EAAKO,SAAS,CACZP,MAAOoB,KAAKC,KAAKrB,GACjBC,mBAAoB,SAAMD,KA7FhC,uDAiGY,IAAD,SACmDsB,KAAKvB,MAAvDC,EADD,EACCA,MAAOC,EADR,EACQA,mBAAoBC,EAD5B,EAC4BA,SAAUE,EADtC,EACsCA,SAC7C,OACE,yBAAKmB,UAAU,aACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,QACb,yBAAKC,IAAKC,IAAMC,IAAI,MAEtB,yBAAKH,UAAU,SACb,4CAGJ,yBAAKA,UAAU,sBACb,2BAAOI,KAAK,OAAOrB,MAAOL,EAAqB,IAAK2B,UAAQ,IAC5D,2BAAOD,KAAK,OAAOrB,MAAON,EAAQ,IAAK4B,UAAQ,KAEjD,yBAAKL,UAAU,WACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,YACb,2BACEA,UAAU,gBACVI,KAAK,SACLE,QAAS,kBAAM,EAAKxB,kBAAkB,MACtCC,MAAM,MAER,2BACEiB,UAAU,gBACVI,KAAK,SACLE,QAAS,kBAAM,EAAKxB,kBAAkB,MACtCC,MAAM,MAER,2BACEiB,UAAU,gBACVI,KAAK,SACLE,QAAS,kBAAM,EAAKxB,kBAAkB,MACtCC,MAAM,MAER,2BACEiB,UAAU,mBACVI,KAAK,SACLE,QAASP,KAAKT,kBACdP,MAAM,MAER,2BACEiB,UAAU,mBACVI,KAAK,SACLE,QAASP,KAAKR,aACdR,MAAM,SAGV,yBAAKiB,UAAU,aACb,2BACEA,UAAU,gBACVI,KAAK,SACLE,QAAS,kBAAM,EAAKxB,kBAAkB,MACtCC,MAAM,MAER,2BACEiB,UAAU,gBACVI,KAAK,SACLE,QAAS,kBAAM,EAAKxB,kBAAkB,MACtCC,MAAM,MAER,2BACEiB,UAAU,gBACVI,KAAK,SACLE,QAAS,kBAAM,EAAKxB,kBAAkB,MACtCC,MAAM,MAER,2BACEiB,UAAU,iBACVI,KAAK,SACLE,QAASP,KAAKJ,iBACdZ,MAAM,QAER,2BACEiB,UAAU,iBACVI,KAAK,SACLE,QAASP,KAAKH,WACdb,MAAM,YAGV,yBAAKiB,UAAU,YACb,2BACEA,UAAU,gBACVI,KAAK,SACLE,QAAS,kBAAM,EAAKxB,kBAAkB,MACtCC,MAAM,MAER,2BACEiB,UAAU,gBACVI,KAAK,SACLE,QAAS,kBAAM,EAAKxB,kBAAkB,MACtCC,MAAM,MAER,2BACEiB,UAAU,gBACVI,KAAK,SACLE,QAAS,kBAAM,EAAKxB,kBAAkB,MACtCC,MAAM,MAER,2BACEiB,UAAU,iBACVI,KAAK,SACLE,QAAS,kBAAM,EAAKrB,oBAAoB,MACxCF,MAAM,MAER,2BACEiB,UAAU,iBACVI,KAAK,SACLE,QAAS,kBAAM,EAAKrB,oBAAoB,MACxCF,MAAM,OAGV,yBAAKiB,UAAU,aACb,2BACEA,UAAU,mBACVM,QAASP,KAAKL,eACdU,KAAK,SACLrB,MAAM,MAER,2BACEiB,UAAU,gBACVI,KAAK,SACLE,QAAS,kBAAM,EAAKxB,kBAAkB,MACtCC,MAAM,MAER,2BACEiB,UAAU,mBACVI,KAAK,SACLE,QAAS,kBACP,EAAKpB,gBAAgBP,EAAUF,EAAOI,IAExCE,MAAM,MAER,2BACEiB,UAAU,iBACVI,KAAK,SACLE,QAAS,kBAAM,EAAKrB,oBAAoB,MACxCF,MAAM,MAER,2BACEiB,UAAU,iBACVI,KAAK,SACLE,QAAS,kBAAM,EAAKrB,oBAAoB,MACxCF,MAAM,QAIZ,yBAAKiB,UAAU,mBACb,yBAAKA,UAAU,YACb,2BAAOA,UAAU,mBAAmBI,KAAK,SAASrB,MAAM,QACxD,2BAAOiB,UAAU,mBAAmBI,KAAK,SAASrB,MAAM,SAE1D,yBAAKiB,UAAU,aACb,2BAAOA,UAAU,mBAAmBI,KAAK,SAASrB,MAAM,QACxD,2BAAOiB,UAAU,mBAAmBI,KAAK,SAASrB,MAAM,SAE1D,yBAAKiB,UAAU,YACb,2BAAOA,UAAU,mBAAmBI,KAAK,SAASrB,MAAM,QACxD,2BAAOiB,UAAU,mBAAmBI,KAAK,SAASrB,MAAM,SAE1D,yBAAKiB,UAAU,aACb,2BAAOA,UAAU,mBAAmBI,KAAK,SAASrB,MAAM,QACxD,2BAAOiB,UAAU,mBAAmBI,KAAK,SAASrB,MAAM,iBAtQxE,GAAgCwB,aCSjBC,EAVf,uKAEI,OACE,6BACE,kBAAC,EAAD,WAJR,GAAyBD,aCSLE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.7fbe7060.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Calculator.css\";\r\nimport logo from \"./logo.png\";\r\n\r\nexport class Calculator extends Component {\r\n  state = {\r\n    input: \"0\",\r\n    operationPerformed: \"\",\r\n    oldValue: \"0\",\r\n    isDotClicked: false,\r\n    operator: \"\",\r\n  };\r\n\r\n  handleButtonClick = (value) => {\r\n    const { input } = this.state;\r\n\r\n    if (input === \"0\") {\r\n      this.setState({\r\n        input: value,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        input: input + value,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleOperatorClick = (operator) => {\r\n    const { input, operationPerformed } = this.state;\r\n    this.setState({\r\n      operator: operator,\r\n      operationPerformed: operationPerformed + input + operator,\r\n      oldValue: input,\r\n      input: \"0\",\r\n    });\r\n  };\r\n\r\n  handleOperation = (firstValue, secondValue, operator) => {\r\n    const { input, operationPerformed } = this.state;\r\n    if (operator === \"+\") {\r\n      this.setState({\r\n        input: parseFloat(firstValue) + parseFloat(secondValue),\r\n      });\r\n    } else if (operator === \"-\") {\r\n      this.setState({\r\n        input: parseFloat(firstValue) - parseFloat(secondValue),\r\n      });\r\n    } else if (operator === \"x\") {\r\n      this.setState({\r\n        input: parseFloat(firstValue) * parseFloat(secondValue),\r\n      });\r\n    } else if (operator === \"/\") {\r\n      this.setState({\r\n        input: parseFloat(firstValue) / parseFloat(secondValue),\r\n      });\r\n    }\r\n    this.setState({\r\n      operationPerformed: operationPerformed + input + \"=\",\r\n    });\r\n  };\r\n\r\n  handleClearScreen = () => {\r\n    this.setState({\r\n      input: \"0\",\r\n      operationPerformed: \"\",\r\n      isDotClicked: false,\r\n    });\r\n  };\r\n\r\n  handleDelete = () => {\r\n    const { input } = this.state;\r\n    this.setState({\r\n      input: input.substring(0, input.length - 1),\r\n    });\r\n  };\r\n\r\n  handleDotClick = () => {\r\n    const { isDotClicked, input } = this.state;\r\n    if (!isDotClicked) {\r\n      this.setState({\r\n        input: input + \".\",\r\n        isDotClicked: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  handePlusOrMinus = () => {\r\n    const { input } = this.state;\r\n    this.setState({\r\n      input: parseFloat(input) * -1,\r\n    });\r\n  };\r\n\r\n  handleRoot = () => {\r\n    const { input } = this.state;\r\n    this.setState({\r\n      input: Math.sqrt(input),\r\n      operationPerformed: \"âˆš\" + input,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { input, operationPerformed, oldValue, operator } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"calculator\">\r\n          <div className=\"title\">\r\n            <div className=\"logo\">\r\n              <img src={logo} alt=\"\" />\r\n            </div>\r\n            <div className=\"label\">\r\n              <h1>Calculator</h1>\r\n            </div>\r\n          </div>\r\n          <div className=\"screen text-center\">\r\n            <input type=\"text\" value={operationPerformed + \" \"} readOnly />\r\n            <input type=\"text\" value={input + \" \"} readOnly />\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <div className=\"mainButtons\">\r\n              <div className=\"firstRow\">\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"7\")}\r\n                  value=\"7\"\r\n                />\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"8\")}\r\n                  value=\"8\"\r\n                />\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"9\")}\r\n                  value=\"9\"\r\n                />\r\n                <input\r\n                  className=\"additionalButton\"\r\n                  type=\"button\"\r\n                  onClick={this.handleClearScreen}\r\n                  value=\"C\"\r\n                />\r\n                <input\r\n                  className=\"additionalButton\"\r\n                  type=\"button\"\r\n                  onClick={this.handleDelete}\r\n                  value=\"DEL\"\r\n                />\r\n              </div>\r\n              <div className=\"secondRow\">\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"4\")}\r\n                  value=\"4\"\r\n                />\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"5\")}\r\n                  value=\"5\"\r\n                />\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"6\")}\r\n                  value=\"6\"\r\n                />\r\n                <input\r\n                  className=\"operatorButton\"\r\n                  type=\"button\"\r\n                  onClick={this.handePlusOrMinus}\r\n                  value=\"+/-\"\r\n                />\r\n                <input\r\n                  className=\"operatorButton\"\r\n                  type=\"button\"\r\n                  onClick={this.handleRoot}\r\n                  value=\"âˆš\"\r\n                />\r\n              </div>\r\n              <div className=\"thirdRow\">\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"1\")}\r\n                  value=\"1\"\r\n                />\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"2\")}\r\n                  value=\"2\"\r\n                />\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"3\")}\r\n                  value=\"3\"\r\n                />\r\n                <input\r\n                  className=\"operatorButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleOperatorClick(\"x\")}\r\n                  value=\"x\"\r\n                />\r\n                <input\r\n                  className=\"operatorButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleOperatorClick(\"/\")}\r\n                  value=\"/\"\r\n                />\r\n              </div>\r\n              <div className=\"fourthRow\">\r\n                <input\r\n                  className=\"additionalButton\"\r\n                  onClick={this.handleDotClick}\r\n                  type=\"button\"\r\n                  value=\".\"\r\n                />\r\n                <input\r\n                  className=\"numericButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleButtonClick(\"0\")}\r\n                  value=\"0\"\r\n                />\r\n                <input\r\n                  className=\"additionalButton\"\r\n                  type=\"button\"\r\n                  onClick={() =>\r\n                    this.handleOperation(oldValue, input, operator)\r\n                  }\r\n                  value=\"=\"\r\n                />\r\n                <input\r\n                  className=\"operatorButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleOperatorClick(\"+\")}\r\n                  value=\"+\"\r\n                />\r\n                <input\r\n                  className=\"operatorButton\"\r\n                  type=\"button\"\r\n                  onClick={() => this.handleOperatorClick(\"-\")}\r\n                  value=\"-\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"advancedButtons\">\r\n              <div className=\"firstRow\">\r\n                <input className=\"scientificButton\" type=\"button\" value=\"hyp\" />\r\n                <input className=\"scientificButton\" type=\"button\" value=\"rad\" />\r\n              </div>\r\n              <div className=\"secondRow\">\r\n                <input className=\"scientificButton\" type=\"button\" value=\"sin\" />\r\n                <input className=\"scientificButton\" type=\"button\" value=\"sec\" />\r\n              </div>\r\n              <div className=\"thirdRow\">\r\n                <input className=\"scientificButton\" type=\"button\" value=\"cos\" />\r\n                <input className=\"scientificButton\" type=\"button\" value=\"cse\" />\r\n              </div>\r\n              <div className=\"fourthRow\">\r\n                <input className=\"scientificButton\" type=\"button\" value=\"tan\" />\r\n                <input className=\"scientificButton\" type=\"button\" value=\"cot\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React, { Component } from \"react\";\nimport Calculator from \"./component/Calculator/Calculator\";\n\nexport class App extends Component {\n  render() {\n    return (\n      <div>\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.a0e30e03.png\";"],"sourceRoot":""}